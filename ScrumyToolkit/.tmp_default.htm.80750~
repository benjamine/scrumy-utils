<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Scrumy Toolkit</title>

    <script type="text/javascript" src="http://www.google.com/jsapi?key=ABCDEFG"></script>

    <script type="text/javascript">
        google.load("jquery", "1");
    </script>

    <script type="text/javascript" src="jquery.js"></script>

    <script type="text/javascript" src="jquery.cookie.js"></script>

</head>
<body>
    <form action="">
    <h1>
        Scrumy Toolkit</h1>
    <div style="padding: 10px; margin: 10px; border-style: solid; border-color: #dFdFeF;
        width: 230px; text-align: right">
        Scrumy:
        <input name="scrumyname" type="text" id="scrumyname" value="" /><br />
        Password:
        <input name="password" type="password" id="scrumypwd" />
    </div>
    <div style="padding: 10px; margin: 10px; border-style: solid; width: 300px; float: left;
        display: inline-block;">
        <h2>
            Add a Task to all Stories in current Sprint.
        </h2>
        Title:
        <input type="text" name="title" id="title" value="Test" maxlength="30" size="30" /><br />
        Scrumer:
        <input type="text" name="scrumer_name" id="scrumer_name" value="" /><br />
        <input type="button" id="btnaddtask" value="Add Tasks" /><br />
        <br />
        <span id="status" style="background: yellow;"></span>
    </div>
    <div style="padding: 10px; margin: 10px; border-style: solid; width: 300px; float: left;
        display: inline-block;">
        <h2>
            Batch task changes in current Sprint
        </h2>
        Title Contains:
        <input type="text" name="titlecontains" id="titlecontains" value="test" maxlength="30"
            size="30" /><br />
        In Status:
        <select id="changeinstatus" name="changeinstatus">
            <option value="">any</option>
            <option value="todo">todo</option>
            <option value="inprogress">inprogress</option>
            <option value="verify" selected="selected">verify</option>
            <option value="done">done</option>
        </select><br />
        Add to Title:
        <input type="text" name="addtotitle" id="addtotitle" value="" maxlength="10" size="10" /><br />
        Set Scrumer:
        <input type="text" name="newscrumer_name" id="newscrumer_name" value="QA" /><br />
        <input type="button" name="btnbatchchange" id="btnbatchchange" value="Change Tasks" /><br />
        <br />
        <span id="batchchangestatus" style="background: yellow;"></span>
    </div>
    </form>

    <script type="text/javascript">

        /**
        *
        *  Base64 encode / decode
        *  http://www.webtoolkit.info/
        *
        **/

        var Base64 = {

            // private property
            _keyStr: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",

            // public method for encoding
            encode: function(input) {
                var output = "";
                var chr1, chr2, chr3, enc1, enc2, enc3, enc4;
                var i = 0;

                input = Base64._utf8_encode(input);

                while (i < input.length) {

                    chr1 = input.charCodeAt(i++);
                    chr2 = input.charCodeAt(i++);
                    chr3 = input.charCodeAt(i++);

                    enc1 = chr1 >> 2;
                    enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                    enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                    enc4 = chr3 & 63;

                    if (isNaN(chr2)) {
                        enc3 = enc4 = 64;
                    } else if (isNaN(chr3)) {
                        enc4 = 64;
                    }

                    output = output +
			this._keyStr.charAt(enc1) + this._keyStr.charAt(enc2) +
			this._keyStr.charAt(enc3) + this._keyStr.charAt(enc4);

                }

                return output;
            },

            // public method for decoding
            decode: function(input) {
                var output = "";
                var chr1, chr2, chr3;
                var enc1, enc2, enc3, enc4;
                var i = 0;

                input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

                while (i < input.length) {

                    enc1 = this._keyStr.indexOf(input.charAt(i++));
                    enc2 = this._keyStr.indexOf(input.charAt(i++));
                    enc3 = this._keyStr.indexOf(input.charAt(i++));
                    enc4 = this._keyStr.indexOf(input.charAt(i++));

                    chr1 = (enc1 << 2) | (enc2 >> 4);
                    chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                    chr3 = ((enc3 & 3) << 6) | enc4;

                    output = output + String.fromCharCode(chr1);

                    if (enc3 != 64) {
                        output = output + String.fromCharCode(chr2);
                    }
                    if (enc4 != 64) {
                        output = output + String.fromCharCode(chr3);
                    }

                }

                output = Base64._utf8_decode(output);

                return output;

            },

            // private method for UTF-8 encoding
            _utf8_encode: function(string) {
                string = string.replace(/\r\n/g, "\n");
                var utftext = "";

                for (var n = 0; n < string.length; n++) {

                    var c = string.charCodeAt(n);

                    if (c < 128) {
                        utftext += String.fromCharCode(c);
                    }
                    else if ((c > 127) && (c < 2048)) {
                        utftext += String.fromCharCode((c >> 6) | 192);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }
                    else {
                        utftext += String.fromCharCode((c >> 12) | 224);
                        utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                        utftext += String.fromCharCode((c & 63) | 128);
                    }

                }

                return utftext;
            },

            // private method for UTF-8 decoding
            _utf8_decode: function(utftext) {
                var string = "";
                var i = 0;
                var c = c1 = c2 = 0;

                while (i < utftext.length) {

                    c = utftext.charCodeAt(i);

                    if (c < 128) {
                        string += String.fromCharCode(c);
                        i++;
                    }
                    else if ((c > 191) && (c < 224)) {
                        c2 = utftext.charCodeAt(i + 1);
                        string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                        i += 2;
                    }
                    else {
                        c2 = utftext.charCodeAt(i + 1);
                        c3 = utftext.charCodeAt(i + 2);
                        string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                        i += 3;
                    }

                }

                return string;
            }

        }

    </script>

    <script type="text/javascript">

        $('#btnaddtask').click(function(e) {

            saveState();

            if (!$('#scrumyname').val()) {
                $('#status').text('scrumy name is required');
                $('#scrumyname').focus();
                return;
            }
            if (!$('#scrumypwd').val()) {
                $('#status').text('password is required');
                $('#scrumypwd').focus();
                return;
            }

            var scrumyname = $.trim($('#scrumyname').val());
            var usrpwd64 = Base64.encode(scrumyname + ':' + $('#scrumypwd').val());
            var currenturl = 'https://scrumy.com/api/scrumies/' + scrumyname + '/sprints/current.json';

            var tasktitle = $.trim($('#title')[0].value);
            var scrumer_name = $.trim($('#scrumer_name')[0].value);
            $('#status').text('accessing scrumy ' + scrumyname);

            $.ajax({
                url: currenturl,
                beforeSend: function(req) {
                    req.setRequestHeader("Origin", document.location.protocol + "//" + document.location.host);
                    req.setRequestHeader("Authorization", "Basic " + usrpwd64);
                },
                success: function(data, textStatus, req) {

                    if (!data.sprint) {
                        $('#status').text('error loading current sprint');
                    } else {
                        var sprint = data.sprint;
                        if (!sprint.stories || sprint.stories.length == 0) {
                            // no stories
                            $('#status').text('no stories found on current sprint');
                        } else {
                            $('#status').text(sprint.stories.length + ' stories found on current sprint');
                            var tasksAdded = 0;
                            for (var i = 0; i < sprint.stories.length; i++) {
                                var story = sprint.stories[i].story;
                                var exists = false;
				if (story.tasks) {
                                    for (var j = 0; j < story.tasks.length; j++) {
                                        var task = story.tasks[j].task;
                                        if ($.trim(task.title || '').toLowerCase() == $.trim(tasktitle || '').toLowerCase()) {
                                            exists = true;
                                            break;
                                        }
                                    }
				}
                                if (!exists) {
                                    currenturl = 'https://scrumy.com/api/stories/' + story.id + '/tasks';
                                    $.ajax({
                                        url: currenturl,
                                        data: {
                                            title: tasktitle,
                                            scrumer_name: scrumer_name
                                        },
                                        contentType: 'application/x-www-form-urlencoded',
                                        type: 'POST',
                                        beforeSend: function(req) {
                                            req.setRequestHeader("Origin", document.location.protocol + "//" + document.location.host);
                                            req.setRequestHeader("Authorization", "Basic " + usrpwd64);
                                        },
                                        success: function(data, textStatus, req) {
                                            // task added
                                            tasksAdded++;
                                            $('#status').text(tasksAdded + ' tasks added');
                                        },
                                        error: function(req, textStatus, error) {
                                            $('#status').text('error adding task: ' + textStatus + ' ' + error);
                                        }
                                    });
                                }

                            }
                        }
                    }
                },
                error: function(req, textStatus, error) {
                    $('#status').text('error accessing current sprint: ' + textStatus + ' ' + error);
                }
            });

        });



        $('#btnbatchchange').click(function(e) {

            saveState();

            if (!$('#scrumyname').val()) {
                $('#batchchangestatus').text('scrumy name is required');
                $('#scrumyname').focus();
                return;
            }
            if (!$('#scrumypwd').val()) {
                $('#batchchangestatus').text('password is required');
                $('#scrumypwd').focus();
                return;
            }

            var scrumyname = $.trim($('#scrumyname').val());
            var usrpwd64 = Base64.encode(scrumyname + ':' + $('#scrumypwd').val());
            var currenturl = 'https://scrumy.com/api/scrumies/' + scrumyname + '/sprints/current.json';

            $('#batchchangestatus').text('accessing scrumy ' + scrumyname);

            $.ajax({
                url: currenturl,
                beforeSend: function(req) {
                    req.setRequestHeader("Origin", document.location.protocol + "//" + document.location.host);
                    req.setRequestHeader("Authorization", "Basic " + usrpwd64);
                },
                success: function(data, textStatus, req) {

                    if (!data.sprint) {
                        $('#batchchangestatus').text('error loading current sprint');
                    } else {
                        var sprint = data.sprint;
                        if (!sprint.stories || sprint.stories.length == 0) {
                            // no stories
                            $('#batchchangestatus').text('no stories found on current sprint');
                        } else {
                            $('#batchchangestatus').text(sprint.stories.length + ' stories found on current sprint');
                            var tasksChanged = 0;

                            var titleCont = $('#titlecontains').val();
                            titleCont = $.trim(titleCont || '').toLowerCase();
                            var inStatus = $('#changeinstatus').val();
                            var addToTaskTitle = $('#addtotitle').val();
                            var newscrumer_name = $('#newscrumer_name').val();

                            for (var i = 0; i < sprint.stories.length; i++) {
                                var story = sprint.stories[i].story;

                                for (var j = 0; j < story.tasks.length; j++) {
                                    var task = story.tasks[j].task;

                                    var changeTask = true;

                                    if (titleCont) {
                                        if ($.trim(task.title || '').toLowerCase().indexOf(titleCont) < 0) {
                                            changeTask = false;
                                            continue;
                                        }
                                    }
                                    if (inStatus && inStatus != '' && inStatus != 'any') {
                                        if (inStatus != task.state) {
                                            changeTask = false;
                                            continue;
                                        }
                                    }

                                    if ((task.title == (task.title + addToTaskTitle) || '') &&
                                        ((!task.scrumer && (newscrumer_name == '' || newscrumer_name == 'UNASSIGNED')) ||
                                         (task.scrumer && task.scrumer.name == newscrumer_name))
                                         ) {
                                        // no change needed
                                        changeTask = false;
                                        continue;
                                    }

                                    if (changeTask) {
                                        currenturl = 'https://scrumy.com/api/tasks/' + task.id + '.json';
                                        try {
                                            $.ajax({
                                                async: false,
                                                url: currenturl,
                                                data: {
                                                    title: (task.title + addToTaskTitle) || '',
                                                    scrumer_name: (newscrumer_name || (task.scrumer && task.scrumer.name))
                                                },
                                                context: { task: task, story: story },
                                                contentType: 'application/x-www-form-urlencoded',
                                                type: 'PUT',
                                                beforeSend: function(req) {
                                                    req.setRequestHeader("Origin", document.location.protocol + "//" + document.location.host);
                                                    req.setRequestHeader("Authorization", "Basic " + usrpwd64);
                                                },
                                                success: function(data, textStatus, req) {
                                                    // task changed
                                                    tasksChanged++;
                                                    $('#batchchangestatus').text(tasksChanged + ' tasks changed');
                                                },
                                                error: function(req, textStatus, error) {
                                                    if (req.status = 200 && textStatus == 'parsererror') {
                                                        // task changed
                                                        tasksChanged++;
                                                        $('#batchchangestatus').text(tasksChanged + ' tasks changed');
                                                    } else {
                                                        $('#batchchangestatus').append('<br/>error changing task #' + this.task.id + ' \'' + this.task.title + '\' in story \'' + this.story.title + '\': ' + textStatus + ' ' + error);
                                                    }
                                                }
                                            });
                                        } catch (ex) {
                                            $('#batchchangestatus').text('error: ' + ex);
                                        }
                                    }
                                }
                            }
                        }
                    }
                },
                error: function(req, textStatus, error) {
                    $('#batchchangestatus').text('error accessing current sprint: ' + textStatus + ' ' + error);
                }
            });

        });

        function saveState() {
            var data = $('input, select').filter(function(){ return this.type!='password'; }).serialize();
            $.cookie('scrumydata', data, { path: '/', expires: 7 });
        }

        function loadState() {

            var data = $.cookie('scrumydata');
            if (data) {
                fields = data.split('&');
                for (var i = 0; i < fields.length; i++) {
                    var kv = fields[i].split('=');
                    $('#' + kv[0]).val(kv[1]);
                }
            }
        }

        $(document).ready(function() {
            loadState();
            saveState();
        });
        
    </script>

</body>
</html>
